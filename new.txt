@admin_bp.route('/login', methods=['GET', 'POST'])
def login():
    try:
        if request.method == 'POST':
            data = request.form
            role = data.get('role')
            email = data.get('email')
            password = data.get('password')

            if not email or not password:
                return jsonify({"error": "Email and password are required"}), 400

            model = get_model_by_role(role)
            if not model:
                return jsonify({"error": "Invalid role"}), 400

            user = db.session.query(model).filter_by(email=email).first()

            if role == 'Admin':
                pass
            elif user.status == 'deactivated' or user.status =='':
                flash('User is not Activate', 'danger')
                return redirect(url_for('admin_bp.login'))
                
            if not user:
                return jsonify({"error": f"No {role} found with this email."}), 404
            
            if not check_password_hash(user.password, password):
                return jsonify({"error": f"Incorrect password for {role}."}), 401

            session.permanent = True
            session['user_id'] = user.id
            session['role'] = role
            session['user_name'] = getattr(user, 'name', user.name)

            # Update user status
            user.online_status = True
            user.last_seen = datetime.now(timezone.utc)
            db.session.commit()

            # Emit status update using the globally defined socketio instance
            current_app.socketio.emit(
                'status_update',
                {'user_id': user.id, 
                 'status': 'online', 
                 'role': role,
                 'laste_seen': user.last_seen.isoformat()
                 },
                broadcast=True  # Broadcast to all connected clients
            )

            # Redirect to role dashboard
            dashboard_routes = {
                "Admin": "admin_bp.admin_dashboard",
                "Manager": "manager.manager_dashboard",
                "SuperDistributor": "super_distributor.super_distributor",
                "Distributor": "distributor.distributor_home",
                "Kitchen": "kitchen.kitchen_dashboard"
            }
            route_name = dashboard_routes.get(role)

            if not route_name:
                return jsonify({"error": "Dashboard route not defined for this role"}), 500

            return redirect(url_for(route_name))

        return render_template('admin/login.html')

    except Exception as e:
        print(f"Error details: {str(e)}")
        return jsonify({"message": "An error occurred during logic. Please try again later,", "status": 500})






###############################################################################################################
"""
import os
from flask import Flask, session
from flask_socketio import SocketIO
from flask_bcrypt import Bcrypt
from flask_migrate import Migrate
from models import db, Admin, Manager, SuperDistributor, Distributor, Kitchen
from routes import create_app_routes
from datetime import datetime, timezone

# Initialize extensions outside of create_app for global access
socketio = SocketIO(cors_allowed_origins="*")
bcrypt = Bcrypt()
db = db  # Assuming db is defined in models
migrate = Migrate()

def create_app():
    app = Flask(__name__, static_url_path='/static', static_folder='static')

    # Configure the app
    app.config.from_object('config.Config')
    app.secret_key = "asf18fsf8s14fsafsdf48sd"
    app.config['UPLOAD_FOLDER'] = os.path.join(os.getcwd(), 'static/images')
    app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}

    # Initialize extensions
    bcrypt.init_app(app)
    db.init_app(app)
    migrate.init_app(app, db)

    # Initialize SocketIO within the app factory
    socketio.init_app(app)

    # Add disconnect handler
    @socketio.on('disconnect')
    def handle_disconnect():
        user_id = session.get('user_id')
        role = session.get('role')
        role_model_map = {
            "Admin": Admin,
            "Manager": Manager,
            "SuperDistributor": SuperDistributor,
            "Distributor": Distributor,
            "Kitchen": Kitchen,
        }
        model = role_model_map.get(role)
        if model and user_id:
            user = model.query.get(user_id)
            if user:
                user.online_status = False
                user.last_seen = datetime.utcnow()
                db.session.commit()
                socketio.emit(
                    'status_update',
                    {'user_id': user.id, 'status': 'offline', 'role': role},
                    to=None  # Sends to all connected clients
                )

    # Register blueprints
    from routes import create_app_routes  # Import inside the function to avoid circular import
    create_app_routes(app)

    return app  # Only return the app instance

if __name__ == "__main__":
    app = create_app()
    socketio.run(app, debug=True)
"""