@admin_bp.route('/admin', methods=['GET'])
@role_required('Admin')
def admin_dashboard():
    # Fetch session data
    role = session.get('role')
    user_id = session.get('user_id')
    user = get_user_query(role, user_id)
    encoded_image = get_image(role, user_id)

    # Initialize counts, totals, and sales data
    manager_count = 0
    super_distributor_count = 0
    distributor_count = 0
    kitchen_count = 0
    total_sales_amount = 0
    total_orders_count = 0
    quantity_sold = 0
    sales_data = []
    monthly_sales = []

    # Chart data initial values
    months = []
    total_sales = []
    kitchen_names = []
    order_counts = []
    pie_chart_labels = []
    pie_chart_data = []

    barChartData = {
        "labels": ["January", "February", "March", "April"],
        "values": [10, 20, 15, 30],
    }

    try:
        # Fetch counts
        manager_count = len(Manager.query.all())
        super_distributor_count = len(SuperDistributor.query.all())
        distributor_count = len(Distributor.query.all())
        kitchen_count = len(Kitchen.query.all())

        # Aggregate totals
        total_sales_amount = db.session.query(func.sum(Order.total_amount)).scalar() or 0
        total_orders_count = OrderItem.query.count()
        quantity_sold = db.session.query(func.sum(OrderItem.quantity)).scalar() or 0

        # Sales data
        sales_data = db.session.query(
            Sales.sale_id,
            Sales.datetime,
            FoodItem.item_name,
            func.sum(OrderItem.price).label("total_price"),
            func.sum(OrderItem.quantity).label("total_quantity")
        ).join(OrderItem, Sales.item_id == OrderItem.item_id)\
        .join(FoodItem, OrderItem.item_id == FoodItem.id)\
        .group_by(Sales.sale_id, FoodItem.item_name, Sales.datetime)\
        .order_by(Sales.datetime.desc())\
        .all()

        # Monthly sales
        monthly_sales = db.session.query(
            func.date_format(Sales.datetime, '%Y-%m').label('month'),
            func.sum(Order.total_amount).label('total_sales')
        ).join(Order, Sales.sale_id == Order.order_id)\
        .group_by(func.date_format(Sales.datetime, '%Y-%m'))\
        .order_by(func.date_format(Sales.datetime, '%Y-%m'))\
        .all()

        # Prepare bar chart data (kitchen orders)
        kitchens_data = db.session.query(
            Kitchen.name,
            func.count(OrderItem.order_item_id)
        ).join(Order, Kitchen.id == Order.kitchen_id)\
        .join(OrderItem, Order.order_id == OrderItem.order_id)\
        .group_by(Kitchen.name).all()

        kitchen_names = [kitchen[0] for kitchen in kitchens_data]
        order_counts = [kitchen[1] for kitchen in kitchens_data]
        print(order_counts)
        # Prepare pie chart data (kitchen sales)
        kitchen_sales_data = db.session.query(
            Kitchen.name,
            func.sum(Order.total_amount)
        ).join(Order, Kitchen.id == Order.kitchen_id)\
        .group_by(Kitchen.name).all()

        pie_chart_labels = [kitchen[0] for kitchen in kitchen_sales_data]
        pie_chart_data = [float(kitchen[1]) for kitchen in kitchen_sales_data]
        print(pie_chart_data)
        # Prepare months and total sales for chart
        months = [month for month, total_sales in monthly_sales]
        total_sales = [float(total_sales) for _, total_sales in monthly_sales]

    except Exception as e:
        print(f"Error fetching data: {e}")

    # Render the admin dashboard template
    return render_template(
        'admin/admin_index.html',
        manager_count=manager_count,
        super_distributor_count=super_distributor_count,
        distributor_count=distributor_count,
        kitchen_count=kitchen_count,
        total_sales_amount=total_sales_amount,
        total_orders_count=total_orders_count,
        quantity_sold=quantity_sold,
        sales_data=sales_data,
        user_name=user.name,
        role=role,
        months=months,
        total_sales=total_sales,
        barChartData=barChartData,
        encoded_image=encoded_image,
        kitchen_names=kitchen_names,
        order_counts=order_counts,
        pie_chart_labels=pie_chart_labels,
        pie_chart_data=pie_chart_data
    )



@admin_bp.route('/admin', methods=['GET'])
@role_required('Admin')
def admin_dashboard():
    try:
        # Fetch session data
        role = session.get('role')
        user_id = session.get('user_id')
        user = get_user_query(role, user_id)
        encoded_image = get_image(role, user_id)

        # Initialize counts and totals
        counts = {
            "manager": len(Manager.query.all()),
            "super_distributor": len(SuperDistributor.query.all()),
            "distributor": len(Distributor.query.all()),
            "kitchen": len(Kitchen.query.all())
        }

        # Aggregate totals
        total_sales_amount = db.session.query(func.sum(Order.total_amount)).scalar() or 0
        total_orders_count = OrderItem.query.count()
        quantity_sold = db.session.query(func.sum(OrderItem.quantity)).scalar() or 0

        # Sales data queries
        sales_data = fetch_sales_data()
        monthly_sales = fetch_monthly_sales()
        months, total_sales = zip(*monthly_sales) if monthly_sales else ([], [])

        # Chart Data
        sales_by_item = fetch_sales_by_item()
        sales_item_names, sales_amounts = zip(*sales_by_item)

        quantity_sold_over_time = fetch_quantity_sold_over_time()
        sale_dates, quantities_sold = zip(*quantity_sold_over_time)

        top_selling_items = fetch_top_selling_items()
        top_item_names, top_item_quantities = zip(*top_selling_items)

        sales_distribution = fetch_sales_distribution()
        distribution_labels, distribution_values = zip(*sales_distribution)

        daily_sales_performance = fetch_daily_sales_performance()
        performance_dates, total_revenues = zip(*daily_sales_performance)

        kitchen_names, order_counts = fetch_kitchen_order_data()
        pie_chart_labels, pie_chart_data = fetch_kitchen_sales_data()

    except Exception as e:
        print(f"Error fetching data in admin_dashboard: {e}")
        counts = sales_data = monthly_sales = sales_item_names = sales_amounts = []
        sale_dates = quantities_sold = top_item_names = top_item_quantities = []
        distribution_labels = distribution_values = performance_dates = total_revenues = []
        kitchen_names = order_counts = pie_chart_labels = pie_chart_data = []

    # Render the admin dashboard template
    return render_template(
        'admin/admin_index.html',
        counts=counts,
        total_sales_amount=total_sales_amount,
        total_orders_count=total_orders_count,
        quantity_sold=quantity_sold,
        sales_data=sales_data,
        user_name=user.name,
        role=role,
        months=months,
        total_sales=total_sales,
        kitchen_names=kitchen_names,
        order_counts=order_counts,
        pie_chart_labels=pie_chart_labels,
        pie_chart_data=pie_chart_data,
        encoded_image=encoded_image,
        sales_by_item={"labels": sales_item_names, "values": sales_amounts},
        quantity_sold_over_time={"labels": sale_dates, "values": quantities_sold},
        top_selling_items={"labels": top_item_names, "values": top_item_quantities},
        sales_distribution={"labels": distribution_labels, "values": distribution_values},
        daily_sales_performance={"labels": performance_dates, "values": total_revenues}
    )


# Refactor queries into separate functions for better readability
def fetch_sales_data():
    return db.session.query(
        Sales.sale_id,
        Sales.datetime,
        FoodItem.item_name,
        func.sum(OrderItem.price).label("total_price"),
        func.sum(OrderItem.quantity).label("total_quantity")
    ).join(OrderItem, Sales.item_id == OrderItem.item_id)\
    .join(FoodItem, OrderItem.item_id == FoodItem.id)\
    .group_by(Sales.sale_id, FoodItem.item_name, Sales.datetime)\
    .order_by(Sales.datetime.desc())\
    .all()


def fetch_monthly_sales():
    result = db.session.query(
        func.date_format(Sales.datetime, '%Y-%m').label('month'),
        func.sum(Order.total_amount).label('total_sales')
    ).join(Order, Sales.sale_id == Order.order_id)\
    .group_by(func.date_format(Sales.datetime, '%Y-%m'))\
    .order_by(func.date_format(Sales.datetime, '%Y-%m'))\
    .all()
    print(f"Montly Sales Data: {result}")
    return result


def fetch_sales_by_item():
    return db.session.query(
        FoodItem.item_name,
        func.sum(OrderItem.price * OrderItem.quantity).label('total_sales')
    ).join(OrderItem, FoodItem.id == OrderItem.item_id)\
    .group_by(FoodItem.item_name).all()


def fetch_quantity_sold_over_time():
    return db.session.query(
        func.date(OrderItem.created_at).label('sale_date'),
        func.sum(OrderItem.quantity).label('total_quantity')
    ).group_by(func.date(OrderItem.created_at))\
    .order_by(func.date(OrderItem.created_at)).all()


def fetch_top_selling_items():
    return db.session.query(
        FoodItem.item_name,
        func.sum(OrderItem.quantity).label('total_quantity')
    ).join(OrderItem, FoodItem.id == OrderItem.item_id)\
    .group_by(FoodItem.item_name)\
    .order_by(func.sum(OrderItem.quantity).desc())\
    .limit(10).all()


def fetch_sales_distribution():
    return db.session.query(
        FoodItem.item_name,
        func.sum(OrderItem.price * OrderItem.quantity).label('total_sales')
    ).join(OrderItem, FoodItem.id == OrderItem.item_id)\
    .group_by(FoodItem.item_name).all()


def fetch_daily_sales_performance():
    return db.session.query(
        func.date(OrderItem.created_at).label('sale_date'),
        func.sum(OrderItem.price * OrderItem.quantity).label('total_revenue')
    ).group_by(func.date(OrderItem.created_at))\
    .order_by(func.date(OrderItem.created_at)).all()


def fetch_kitchen_order_data():
    kitchens_data = db.session.query(
        Kitchen.name,
        func.count(OrderItem.order_item_id)
    ).join(Order, Kitchen.id == Order.kitchen_id)\
    .join(OrderItem, Order.order_id == OrderItem.order_id)\
    .group_by(Kitchen.name).all()
    return zip(*kitchens_data)  # returns kitchen_names, order_counts


def fetch_kitchen_sales_data():
    kitchen_sales_data = db.session.query(
        Kitchen.name,
        func.sum(Order.total_amount)
    ).join(Order, Kitchen.id == Order.kitchen_id)\
    .group_by(Kitchen.name).all()
    return zip(*kitchen_sales_data)  # returns pie_chart_labels, pie_chart_data




@admin_bp.route('/admin', methods=['GET'])
@role_required('Admin')
def admin_dashboard():
    try:
        # Fetch counts
        manager_count = len(Manager.query.all())
        super_distributor_count = len(SuperDistributor.query.all())
        distributor_count = len(Distributor.query.all())
        kitchen_count = len(Kitchen.query.all())

        # Aggregate totals
        total_sales_amount = db.session.query(func.sum(Order.total_amount)).scalar() or 0
        total_orders_count = OrderItem.query.count()
        quantity_sold = db.session.query(func.sum(OrderItem.quantity)).scalar() or 0

        # Chart 1: Sales by Item Name
        sales_by_item = db.session.query(
            FoodItem.item_name,
            func.sum(OrderItem.price * OrderItem.quantity).label('total_sales')
        ).join(OrderItem, FoodItem.id == OrderItem.item_id)\
        .group_by(FoodItem.item_name).all()

        sales_item_names = [item[0] for item in sales_by_item]
        sales_amounts = [float(item[1]) for item in sales_by_item]

        # Chart 2: Quantity Sold Over Time
        quantity_sold_over_time = db.session.query(
            func.date(OrderItem.created_at).label('sale_date'),
            func.sum(OrderItem.quantity).label('total_quantity')
        ).group_by(func.date(OrderItem.created_at))\
        .order_by(func.date(OrderItem.created_at)).all()

        sale_dates = [str(row[0]) for row in quantity_sold_over_time]
        quantities_sold = [int(row[1]) for row in quantity_sold_over_time]

        # Chart 3: Top-Selling Items
        top_selling_items = db.session.query(
            FoodItem.item_name,
            func.sum(OrderItem.quantity).label('total_quantity')
        ).join(OrderItem, FoodItem.id == OrderItem.item_id)\
        .group_by(FoodItem.item_name)\
        .order_by(func.sum(OrderItem.quantity).desc())\
        .limit(10).all()

        top_item_names = [item[0] for item in top_selling_items]
        top_item_quantities = [int(item[1]) for item in top_selling_items]

        # Chart 4: Sales Distribution by Item
        sales_distribution = db.session.query(
            FoodItem.item_name,
            func.sum(OrderItem.price * OrderItem.quantity).label('total_sales')
        ).join(OrderItem, FoodItem.id == OrderItem.item_id)\
        .group_by(FoodItem.item_name).all()

        distribution_labels = [item[0] for item in sales_distribution]
        distribution_values = [float(item[1]) for item in sales_distribution]

        # Chart 5: Daily Sales Performance
        daily_sales_performance = db.session.query(
            func.date(OrderItem.created_at).label('sale_date'),
            func.sum(OrderItem.price * OrderItem.quantity).label('total_revenue')
        ).group_by(func.date(OrderItem.created_at))\
        .order_by(func.date(OrderItem.created_at)).all()

        performance_dates = [str(row[0]) for row in daily_sales_performance]
        total_revenues = [float(row[1]) for row in daily_sales_performance]

    except Exception as e:
        print(f"Error fetching data: {e}")
        return render_template('error.html', error="Error fetching dashboard data")

    # Render admin dashboard
    return render_template(
        'admin/admin_index.html',
        manager_count=manager_count,
        super_distributor_count=super_distributor_count,
        distributor_count=distributor_count,
        kitchen_count=kitchen_count,
        total_sales_amount=total_sales_amount,
        total_orders_count=total_orders_count,
        quantity_sold=quantity_sold,
        sales_by_item={"labels": sales_item_names, "values": sales_amounts},
        quantity_sold_over_time={"labels": sale_dates, "values": quantities_sold},
        top_selling_items={"labels": top_item_names, "values": top_item_quantities},
        sales_distribution={"labels": distribution_labels, "values": distribution_values},
        daily_sales_performance={"labels": performance_dates, "values": total_revenues}
    )
